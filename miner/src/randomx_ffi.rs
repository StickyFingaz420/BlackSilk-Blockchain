/* automatically generated by rust-bindgen 0.71.1 */
#![allow(dead_code)]

pub const RANDOMX_FLAG_DEFAULT: randomx_flags = 0;
pub const RANDOMX_FLAG_LARGE_PAGES: randomx_flags = 1;
pub const RANDOMX_FLAG_HARD_AES: randomx_flags = 2;
pub const RANDOMX_FLAG_FULL_MEM: randomx_flags = 4;
pub const RANDOMX_FLAG_JIT: randomx_flags = 8;
pub const RANDOMX_FLAG_SECURE: randomx_flags = 16;
pub const RANDOMX_FLAG_ARGON2_SSSE3: randomx_flags = 32;
pub const RANDOMX_FLAG_ARGON2_AVX2: randomx_flags = 64;
pub const RANDOMX_FLAG_ARGON2: randomx_flags = 96;
pub type randomx_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct randomx_dataset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct randomx_cache {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct randomx_vm {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = " @return The recommended flags to be used on the current machine.\n         Does not include:\n            RANDOMX_FLAG_LARGE_PAGES\n            RANDOMX_FLAG_FULL_MEM\n            RANDOMX_FLAG_SECURE\n         These flags must be added manually if desired.\n         On OpenBSD RANDOMX_FLAG_SECURE is enabled by default in JIT mode as W^X is enforced by the OS."]
    pub fn randomx_get_flags() -> randomx_flags;
}
unsafe extern "C" {
    #[doc = " Creates a randomx_cache structure and allocates memory for RandomX Cache.\n\n @param flags is any combination of these 2 flags (each flag can be set or not set):\n        RANDOMX_FLAG_LARGE_PAGES - allocate memory in large pages\n        RANDOMX_FLAG_JIT - create cache structure with JIT compilation support; this makes\n                           subsequent Dataset initialization faster\n        Optionally, one of these two flags may be selected:\n        RANDOMX_FLAG_ARGON2_SSSE3 - optimized Argon2 for CPUs with the SSSE3 instruction set\n                                   makes subsequent cache initialization faster\n        RANDOMX_FLAG_ARGON2_AVX2 - optimized Argon2 for CPUs with the AVX2 instruction set\n                                   makes subsequent cache initialization faster\n\n @return Pointer to an allocated randomx_cache structure.\n         Returns NULL if:\n         (1) memory allocation fails\n         (2) the RANDOMX_FLAG_JIT is set and JIT compilation is not supported on the current platform\n         (3) an invalid or unsupported RANDOMX_FLAG_ARGON2 value is set"]
    pub fn randomx_alloc_cache(flags: randomx_flags) -> *mut randomx_cache;
}
unsafe extern "C" {
    #[doc = " Initializes the cache memory and SuperscalarHash using the provided key value.\n Does nothing if called again with the same key value.\n\n @param cache is a pointer to a previously allocated randomx_cache structure. Must not be NULL.\n @param key is a pointer to memory which contains the key value. Must not be NULL.\n @param keySize is the number of bytes of the key."]
    pub fn randomx_init_cache(
        cache: *mut randomx_cache,
        key: *const ::std::os::raw::c_void,
        keySize: usize,
    );
}
unsafe extern "C" {
    #[doc = " Releases all memory occupied by the randomx_cache structure.\n\n @param cache is a pointer to a previously allocated randomx_cache structure."]
    pub fn randomx_release_cache(cache: *mut randomx_cache);
}
unsafe extern "C" {
    #[doc = " Creates a randomx_dataset structure and allocates memory for RandomX Dataset.\n\n @param flags is the initialization flags. Only one flag is supported (can be set or not set):\n        RANDOMX_FLAG_LARGE_PAGES - allocate memory in large pages\n\n @return Pointer to an allocated randomx_dataset structure.\n         NULL is returned if memory allocation fails."]
    pub fn randomx_alloc_dataset(flags: randomx_flags) -> *mut randomx_dataset;
}
unsafe extern "C" {
    #[doc = " Gets the number of items contained in the dataset.\n\n @return the number of items contained in the dataset."]
    pub fn randomx_dataset_item_count() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[doc = " Initializes dataset items.\n\n Note: In order to use the Dataset, all items from 0 to (randomx_dataset_item_count() - 1) must be initialized.\n This may be done by several calls to this function using non-overlapping item sequences.\n\n @param dataset is a pointer to a previously allocated randomx_dataset structure. Must not be NULL.\n @param cache is a pointer to a previously allocated and initialized randomx_cache structure. Must not be NULL.\n @param startItem is the item number where initialization should start.\n @param itemCount is the number of items that should be initialized."]
    pub fn randomx_init_dataset(
        dataset: *mut randomx_dataset,
        cache: *mut randomx_cache,
        startItem: ::std::os::raw::c_ulong,
        itemCount: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    #[doc = " Returns a pointer to the internal memory buffer of the dataset structure. The size\n of the internal memory buffer is randomx_dataset_item_count() * RANDOMX_DATASET_ITEM_SIZE.\n\n @param dataset is a pointer to a previously allocated randomx_dataset structure. Must not be NULL.\n\n @return Pointer to the internal memory buffer of the dataset structure."]
    pub fn randomx_get_dataset_memory(dataset: *mut randomx_dataset)
        -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Releases all memory occupied by the randomx_dataset structure.\n\n @param dataset is a pointer to a previously allocated randomx_dataset structure."]
    pub fn randomx_release_dataset(dataset: *mut randomx_dataset);
}
unsafe extern "C" {
    #[doc = " Creates and initializes a RandomX virtual machine.\n\n @param flags is any combination of these 5 flags (each flag can be set or not set):\n        RANDOMX_FLAG_LARGE_PAGES - allocate scratchpad memory in large pages\n        RANDOMX_FLAG_HARD_AES - virtual machine will use hardware accelerated AES\n        RANDOMX_FLAG_FULL_MEM - virtual machine will use the full dataset\n        RANDOMX_FLAG_JIT - virtual machine will use a JIT compiler\n        RANDOMX_FLAG_SECURE - when combined with RANDOMX_FLAG_JIT, the JIT pages are never\n                              writable and executable at the same time (W^X policy)\n        The numeric values of the first 4 flags are ordered so that a higher value will provide\n        faster hash calculation and a lower numeric value will provide higher portability.\n        Using RANDOMX_FLAG_DEFAULT (all flags not set) works on all platforms, but is the slowest.\n @param cache is a pointer to an initialized randomx_cache structure. Can be\n        NULL if RANDOMX_FLAG_FULL_MEM is set.\n @param dataset is a pointer to a randomx_dataset structure. Can be NULL\n        if RANDOMX_FLAG_FULL_MEM is not set.\n\n @return Pointer to an initialized randomx_vm structure.\n         Returns NULL if:\n         (1) Scratchpad memory allocation fails.\n         (2) The requested initialization flags are not supported on the current platform.\n         (3) cache parameter is NULL and RANDOMX_FLAG_FULL_MEM is not set\n         (4) dataset parameter is NULL and RANDOMX_FLAG_FULL_MEM is set"]
    pub fn randomx_create_vm(
        flags: randomx_flags,
        cache: *mut randomx_cache,
        dataset: *mut randomx_dataset,
    ) -> *mut randomx_vm;
}
unsafe extern "C" {
    #[doc = " Reinitializes a virtual machine with a new Cache. This function should be called anytime\n the Cache is reinitialized with a new key. Does nothing if called with a Cache containing\n the same key value as already set.\n\n @param machine is a pointer to a randomx_vm structure that was initialized\n        without RANDOMX_FLAG_FULL_MEM. Must not be NULL.\n @param cache is a pointer to an initialized randomx_cache structure. Must not be NULL."]
    pub fn randomx_vm_set_cache(machine: *mut randomx_vm, cache: *mut randomx_cache);
}
unsafe extern "C" {
    #[doc = " Reinitializes a virtual machine with a new Dataset.\n\n @param machine is a pointer to a randomx_vm structure that was initialized\n        with RANDOMX_FLAG_FULL_MEM. Must not be NULL.\n @param dataset is a pointer to an initialized randomx_dataset structure. Must not be NULL."]
    pub fn randomx_vm_set_dataset(machine: *mut randomx_vm, dataset: *mut randomx_dataset);
}
unsafe extern "C" {
    #[doc = " Releases all memory occupied by the randomx_vm structure.\n\n @param machine is a pointer to a previously created randomx_vm structure."]
    pub fn randomx_destroy_vm(machine: *mut randomx_vm);
}
unsafe extern "C" {
    #[doc = " Calculates a RandomX hash value.\n\n @param machine is a pointer to a randomx_vm structure. Must not be NULL.\n @param input is a pointer to memory to be hashed. Must not be NULL.\n @param inputSize is the number of bytes to be hashed.\n @param output is a pointer to memory where the hash will be stored. Must not\n        be NULL and at least RANDOMX_HASH_SIZE bytes must be available for writing."]
    pub fn randomx_calculate_hash(
        machine: *mut randomx_vm,
        input: *const ::std::os::raw::c_void,
        inputSize: usize,
        output: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " Set of functions used to calculate multiple RandomX hashes more efficiently.\n randomx_calculate_hash_first will begin a hash calculation.\n randomx_calculate_hash_next  will output the hash value of the previous input\n                              and begin the calculation of the next hash.\n randomx_calculate_hash_last  will output the hash value of the previous input.\n\n WARNING: These functions may alter the floating point rounding mode of the calling thread.\n\n @param machine is a pointer to a randomx_vm structure. Must not be NULL.\n @param input is a pointer to memory to be hashed. Must not be NULL.\n @param inputSize is the number of bytes to be hashed.\n @param nextInput is a pointer to memory to be hashed for the next hash. Must not be NULL.\n @param nextInputSize is the number of bytes to be hashed for the next hash.\n @param output is a pointer to memory where the hash will be stored. Must not\n        be NULL and at least RANDOMX_HASH_SIZE bytes must be available for writing."]
    pub fn randomx_calculate_hash_first(
        machine: *mut randomx_vm,
        input: *const ::std::os::raw::c_void,
        inputSize: usize,
    );
}
unsafe extern "C" {
    pub fn randomx_calculate_hash_next(
        machine: *mut randomx_vm,
        nextInput: *const ::std::os::raw::c_void,
        nextInputSize: usize,
        output: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn randomx_calculate_hash_last(
        machine: *mut randomx_vm,
        output: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " Calculate a RandomX commitment from a RandomX hash and its input.\n\n @param input is a pointer to memory that was hashed. Must not be NULL.\n @param inputSize is the number of bytes in the input.\n @param hash_in is the output from randomx_calculate_hash* (RANDOMX_HASH_SIZE bytes).\n @param com_out is a pointer to memory where the commitment will be stored. Must not\n        be NULL and at least RANDOMX_HASH_SIZE bytes must be available for writing."]
    pub fn randomx_calculate_commitment(
        input: *const ::std::os::raw::c_void,
        inputSize: usize,
        hash_in: *const ::std::os::raw::c_void,
        com_out: *mut ::std::os::raw::c_void,
    );
}
